// Define the player object
class Player {
  float x, y; // Player position
  float velocityY; // Y-direction velocity
  float gravity; // Gravity
  float jumpForce; // Jump force
  float playerWidth = 40; // Player width
  float playerHeight = 40; // Player height
  boolean movingLeft, movingRight; // Flag to indicate player movement direction
  boolean isground = true;
  
  Player(float x, float y, float gravity, float jumpForce) {
    this.x = x;
    this.y = y;
    this.gravity = gravity;
    this.jumpForce = jumpForce;
    velocityY = 0;
    movingLeft = false;
    movingRight = false;
  }
  
  void update() {
    float heightChange;
    if(x + playerWidth > obstacleX + 10 && x < obstacleX + obstacleWidth - 10){
      heightChange = height - obstacleHeight;
    }
    else{
      heightChange = height;
    }
    
    // Update player position based on movement direction
    if (movingLeft) {
      x -= 5;
    }
    if (movingRight) {
      x += 5;
    }
    
    // Apply gravity
    velocityY += gravity;
    y += velocityY;
    
    // Collision detection: Stop descending if player touches the bottom
    if (y + playerHeight > heightChange) {
      y = heightChange - playerHeight;
      velocityY = 0;
    }
  }
  
  void jump() {
    // Player jumps upward
    if (y == height - playerHeight) {
      velocityY = -jumpForce;
    }
  }
  
  // Update collision detection
  void checkCollision(float obstacleX, float obstacleY, float obstacleWidth, float obstacleHeight) {
    // Stop movement if player intersects with obstacle
    if (x + playerWidth > obstacleX && x < obstacleX + obstacleWidth && y + playerHeight > obstacleY && y < obstacleY + obstacleHeight) {
      // Player is on the right side of the obstacle
      if (x < obstacleX + obstacleWidth && x + playerWidth > obstacleX + obstacleWidth) {
        x = obstacleX + obstacleWidth;
      } 
      // Player is on the left side of the obstacle
      else if (x + playerWidth > obstacleX && x < obstacleX) {
        x = obstacleX - playerWidth;
      }
    }
  }
  
  void display() {
    // Display the player
    fill(255);
    rect(x, y, playerWidth, playerHeight);
  }
}

Player player; // Player object
float gravity = 0.7; // Gravity acceleration
float jumpForce = 12; // Jump force
float playerSpeed = 5; // Player movement speed

float obstacleX = 200; // Obstacle position
float obstacleY = 250;
float obstacleWidth = 50;
float obstacleHeight = 50;

void setup() {
  size(400, 300);
  player = new Player(width/2, height/2, gravity, jumpForce);
}

void draw() {
  background(0);
  
  // Draw the obstacle
  fill(150);
  rect(obstacleX, obstacleY, obstacleWidth, obstacleHeight);
  
  // Update and display the player
  player.update();
  player.checkCollision(obstacleX, obstacleY, obstacleWidth, obstacleHeight);
  player.display();
}

void keyPressed() {
  if (key == ' ') { // Space key to jump
    player.jump();
  } else if (keyCode == LEFT || key == 'a') { // Left arrow or A key to move left
    player.movingLeft = true;
  } else if (keyCode == RIGHT || key == 'd') { // Right arrow or D key to move right
    player.movingRight = true;
  }
}

void keyReleased() {
  if (keyCode == LEFT || key == 'a') { // Left arrow or A key released, stop moving left
    player.movingLeft = false;
  } else if (keyCode == RIGHT || key == 'd') { // Right arrow or D key released, stop moving right
    player.movingRight = false;
  }
}
